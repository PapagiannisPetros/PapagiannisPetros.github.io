document.addEventListener("DOMContentLoaded", () => {
    const endpointChars = [104, 116, 116, 112, 115, 58, 47, 47, 112, 97, 112, 97, 103, 105, 97, 110, 110, 105, 115, 45, 112, 101, 116, 114, 111, 115, 45, 103, 105, 116, 104, 117, 98, 45, 105, 111, 46, 118, 101, 114, 99, 101, 108, 46, 97, 112, 112, 47, 97, 112, 105, 47, 99, 111, 110, 116, 97, 99, 116];
    const endpoint = String.fromCharCode(...endpointChars);
    const keyChars = [115, 101, 99, 114, 101, 116, 45, 49, 50, 51];
    const apiKey = String.fromCharCode(...keyChars);

    document.getElementById("contactForm")?.addEventListener("submit", async (e) => {
        e.preventDefault();
        const formData = {
            name: e.target.name.value.trim(),
            email: e.target.email.value.trim(),
            subject: e.target.subject.value.trim(),
            message: e.target.message.value.trim(),
            website: e.target.website.value
        };
        const msgElem = document.getElementById('formMessage');
        msgElem.textContent = "Sending...";
        msgElem.className = "";
        try {
            const res = await fetch(endpoint, {
                method: "POST",
                headers: { "Content-Type": "application/json", "x-api-key": apiKey },
                body: JSON.stringify(formData)
            });
            if (res.status === 429) {
                msgElem.textContent = "You're sending messages too quickly. Please wait.";
                msgElem.classList.add("warning");
            } else if (res.ok) {
                msgElem.textContent = "Message sent successfully! ðŸŽ‰";
                msgElem.classList.add("success");
                e.target.reset();
            } else {
                msgElem.textContent = "Error sending message.";
                msgElem.classList.add("error");
            }
        } catch (err) {
            msgElem.textContent = "Network error. Please try again later.";
            msgElem.classList.add("error");
        }
    });

    // Typed.js animations
    if (document.querySelector("#beg3-mobile")) {
        new Typed("#beg3-mobile", { strings: ["Dreamer", "Doer", "Lover"], typeSpeed: 50, backSpeed: 30, loop: true, showCursor: false });
    } else if (document.querySelector("#beg3")) {
        new Typed("#beg3", { strings: ["Dreamer", "Doer", "Lover"], typeSpeed: 50, backSpeed: 30, loop: true });
    }
    new Typed("#beg3", { strings: ["Dreamer", "Doer", "Lover"], typeSpeed: 50, backSpeed: 30, backDelay: 1500, loop: true });

    // AOS
    AOS.init();

    // Navbar scroll
    window.addEventListener("scroll", () => {
        const navbar = document.querySelector(".navbar");
        navbar?.classList.toggle("scrolled", window.scrollY > 100);
    });

    // VanillaTilt
    VanillaTilt.init(document.querySelectorAll(".service-box"), { max: 15, speed: 400, glare: true, "max-glare": 0.2 });

    // Progress bar
    window.addEventListener("scroll", () => {
        const scroll = document.documentElement.scrollTop;
        const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
        document.getElementById("progressBar").style.width = (scroll / height) * 100 + "%";
    });

    // Font resizing
    window.addEventListener('scroll', () => {
        const beg1 = document.getElementById("beg1");
        const beg2 = document.getElementById("beg2");
        const beg4 = document.getElementById("beg4");
        if (beg1 && beg2 && beg4) {
            const progress = Math.min(window.scrollY / window.innerHeight, 1);
            beg1.style.fontSize = `${2 - 1 * progress}rem`;
            beg2.style.fontSize = `${3 - 1.5 * progress}rem`;
            beg4.style.fontSize = `${1.5 - 0.5 * progress}rem`;
        }
    });

    // Hero card effect
    window.addEventListener('scroll', () => {
        const hero = document.querySelector('.hero');
        if (hero) {
            const progress = Math.min(window.scrollY / window.innerHeight, 1);
            hero.style.transform = `scale(${1 - progress * 0.1}) translateY(${progress * -50}px)`;
            hero.style.opacity = 1 - progress * 0.1;
        }
    });

    // GSAP animations
    gsap.registerPlugin(ScrollTrigger);
    gsap.utils.toArray(".section").forEach(section => {
        gsap.from(section, {
            opacity: 0, y: 50, duration: 1,
            scrollTrigger: { trigger: section, start: "top 80%", toggleActions: "play none none reverse" }
        });
    });
});
